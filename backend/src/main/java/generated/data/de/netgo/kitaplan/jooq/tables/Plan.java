/*
 * This file is generated by jOOQ.
 */
package de.netgo.kitaplan.jooq.tables;


import de.netgo.kitaplan.jooq.Keys;
import de.netgo.kitaplan.jooq.Public;
import de.netgo.kitaplan.jooq.tables.records.PlanRecord;

import java.time.LocalDate;
import java.time.LocalTime;
import java.util.Collection;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Plan extends TableImpl<PlanRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.plan</code>
     */
    public static final Plan PLAN = new Plan();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlanRecord> getRecordType() {
        return PlanRecord.class;
    }

    /**
     * The column <code>public.plan.id</code>.
     */
    public final TableField<PlanRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.plan.woche</code>.
     */
    public final TableField<PlanRecord, String> WOCHE = createField(DSL.name("woche"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.plan.datum</code>.
     */
    public final TableField<PlanRecord, LocalDate> DATUM = createField(DSL.name("datum"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.plan.wald</code>.
     */
    public final TableField<PlanRecord, Boolean> WALD = createField(DSL.name("wald"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.plan.offen</code>.
     */
    public final TableField<PlanRecord, Boolean> OFFEN = createField(DSL.name("offen"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.plan.start</code>.
     */
    public final TableField<PlanRecord, LocalTime> START = createField(DSL.name("start"), SQLDataType.LOCALTIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("'08:00:00'::time without time zone"), SQLDataType.LOCALTIME)), this, "");

    /**
     * The column <code>public.plan.ende</code>.
     */
    public final TableField<PlanRecord, LocalTime> ENDE = createField(DSL.name("ende"), SQLDataType.LOCALTIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("'16:30:00'::time without time zone"), SQLDataType.LOCALTIME)), this, "");

    /**
     * The column <code>public.plan.abfahrt</code>.
     */
    public final TableField<PlanRecord, LocalTime> ABFAHRT = createField(DSL.name("abfahrt"), SQLDataType.LOCALTIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("'09:00:00'::time without time zone"), SQLDataType.LOCALTIME)), this, "");

    /**
     * The column <code>public.plan.kommentar</code>.
     */
    public final TableField<PlanRecord, String> KOMMENTAR = createField(DSL.name("kommentar"), SQLDataType.VARCHAR(255), this, "");

    private Plan(Name alias, Table<PlanRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Plan(Name alias, Table<PlanRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.plan</code> table reference
     */
    public Plan(String alias) {
        this(DSL.name(alias), PLAN);
    }

    /**
     * Create an aliased <code>public.plan</code> table reference
     */
    public Plan(Name alias) {
        this(alias, PLAN);
    }

    /**
     * Create a <code>public.plan</code> table reference
     */
    public Plan() {
        this(DSL.name("plan"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<PlanRecord> getPrimaryKey() {
        return Keys.PLAN_PKEY;
    }

    @Override
    public Plan as(String alias) {
        return new Plan(DSL.name(alias), this);
    }

    @Override
    public Plan as(Name alias) {
        return new Plan(alias, this);
    }

    @Override
    public Plan as(Table<?> alias) {
        return new Plan(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Plan rename(String name) {
        return new Plan(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Plan rename(Name name) {
        return new Plan(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Plan rename(Table<?> name) {
        return new Plan(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Plan where(Condition condition) {
        return new Plan(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Plan where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Plan where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Plan where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Plan where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Plan where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Plan where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Plan where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Plan whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Plan whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
