/*
 * This file is generated by jOOQ.
 */
package de.netgo.kitaplan.jooq.tables;


import de.netgo.kitaplan.jooq.Keys;
import de.netgo.kitaplan.jooq.Public;
import de.netgo.kitaplan.jooq.tables.Benutzer.BenutzerPath;
import de.netgo.kitaplan.jooq.tables.Plan.PlanPath;
import de.netgo.kitaplan.jooq.tables.records.BenutzerPlanRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class BenutzerPlan extends TableImpl<BenutzerPlanRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.benutzer_plan</code>
     */
    public static final BenutzerPlan BENUTZER_PLAN = new BenutzerPlan();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BenutzerPlanRecord> getRecordType() {
        return BenutzerPlanRecord.class;
    }

    /**
     * The column <code>public.benutzer_plan.benutzer_id</code>.
     */
    public final TableField<BenutzerPlanRecord, UUID> BENUTZER_ID = createField(DSL.name("benutzer_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.benutzer_plan.plan_id</code>.
     */
    public final TableField<BenutzerPlanRecord, UUID> PLAN_ID = createField(DSL.name("plan_id"), SQLDataType.UUID.nullable(false), this, "");

    private BenutzerPlan(Name alias, Table<BenutzerPlanRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private BenutzerPlan(Name alias, Table<BenutzerPlanRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.benutzer_plan</code> table reference
     */
    public BenutzerPlan(String alias) {
        this(DSL.name(alias), BENUTZER_PLAN);
    }

    /**
     * Create an aliased <code>public.benutzer_plan</code> table reference
     */
    public BenutzerPlan(Name alias) {
        this(alias, BENUTZER_PLAN);
    }

    /**
     * Create a <code>public.benutzer_plan</code> table reference
     */
    public BenutzerPlan() {
        this(DSL.name("benutzer_plan"), null);
    }

    public <O extends Record> BenutzerPlan(Table<O> path, ForeignKey<O, BenutzerPlanRecord> childPath, InverseForeignKey<O, BenutzerPlanRecord> parentPath) {
        super(path, childPath, parentPath, BENUTZER_PLAN);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class BenutzerPlanPath extends BenutzerPlan implements Path<BenutzerPlanRecord> {
        public <O extends Record> BenutzerPlanPath(Table<O> path, ForeignKey<O, BenutzerPlanRecord> childPath, InverseForeignKey<O, BenutzerPlanRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private BenutzerPlanPath(Name alias, Table<BenutzerPlanRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public BenutzerPlanPath as(String alias) {
            return new BenutzerPlanPath(DSL.name(alias), this);
        }

        @Override
        public BenutzerPlanPath as(Name alias) {
            return new BenutzerPlanPath(alias, this);
        }

        @Override
        public BenutzerPlanPath as(Table<?> alias) {
            return new BenutzerPlanPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<BenutzerPlanRecord> getPrimaryKey() {
        return Keys.BENUTZER_PLAN_PKEY;
    }

    @Override
    public List<ForeignKey<BenutzerPlanRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BENUTZER_PLAN__BENUTZER_PLAN_BENUTZER_ID_FKEY, Keys.BENUTZER_PLAN__BENUTZER_PLAN_PLAN_ID_FKEY);
    }

    private transient BenutzerPath _benutzer;

    /**
     * Get the implicit join path to the <code>public.benutzer</code> table.
     */
    public BenutzerPath benutzer() {
        if (_benutzer == null)
            _benutzer = new BenutzerPath(this, Keys.BENUTZER_PLAN__BENUTZER_PLAN_BENUTZER_ID_FKEY, null);

        return _benutzer;
    }

    private transient PlanPath _plan;

    /**
     * Get the implicit join path to the <code>public.plan</code> table.
     */
    public PlanPath plan() {
        if (_plan == null)
            _plan = new PlanPath(this, Keys.BENUTZER_PLAN__BENUTZER_PLAN_PLAN_ID_FKEY, null);

        return _plan;
    }

    @Override
    public BenutzerPlan as(String alias) {
        return new BenutzerPlan(DSL.name(alias), this);
    }

    @Override
    public BenutzerPlan as(Name alias) {
        return new BenutzerPlan(alias, this);
    }

    @Override
    public BenutzerPlan as(Table<?> alias) {
        return new BenutzerPlan(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BenutzerPlan rename(String name) {
        return new BenutzerPlan(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BenutzerPlan rename(Name name) {
        return new BenutzerPlan(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BenutzerPlan rename(Table<?> name) {
        return new BenutzerPlan(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BenutzerPlan where(Condition condition) {
        return new BenutzerPlan(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BenutzerPlan where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BenutzerPlan where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BenutzerPlan where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BenutzerPlan where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BenutzerPlan where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BenutzerPlan where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BenutzerPlan where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BenutzerPlan whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BenutzerPlan whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
